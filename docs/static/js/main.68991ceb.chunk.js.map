{"version":3,"sources":["AudioLoop.ts","LoopDisplay.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AudioLoop","delaySeconds","Object","classCallCheck","this","audioCtx","source","gain","delay","AudioContext","createGain","createDelay","delayTime","setValueAtTime","currentTime","createClass","key","value","sourceStream","disconnect","createMediaStreamSource","connect","volume","destination","exponentialRampToValueAtTime","setTimeout","LoopDisplay","_React$PureComponent","props","_this","possibleConstructorReturn","getPrototypeOf","call","interval","state","beatsRemaining","numBeats","loopNumber","inherits","stop","_this2","classes","playing","startStopAction","start","startStop","react","className","onClick","type","onChange","e","setNumBeats","parseInt","target","disabled","min","max","step","beatLengthMs","setBeatLength","_this3","setInterval","beat","setState","undefined","clearInterval","_this4","loop","React","App","audioLoop","error","looping","getLoopLength","navigator","mediaDevices","getUserMedia","audio","video","then","stream","setSource","catch","err","nextProps","nextState","setDelay","LoopDisplay_LoopDisplay","num","length","startLoop","stopLoop","nextLoop","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.68991ceb.chunk.js","sourcesContent":["// const AudioContext = (window as any).AudioContext || (window as any).webkitAudioContext;\r\n\r\nexport class AudioLoop {\r\n    private readonly audioCtx: AudioContext;\r\n    private source: MediaStreamAudioSourceNode | undefined;\r\n    private readonly gain: GainNode;\r\n    private readonly delay: DelayNode;\r\n\r\n    constructor(delaySeconds: number) {\r\n        this.audioCtx = new AudioContext();\r\n\r\n        this.gain = this.audioCtx.createGain();\r\n        this.delay = this.audioCtx.createDelay(60);\r\n\r\n        this.delay.delayTime.setValueAtTime(delaySeconds, this.audioCtx.currentTime);\r\n    }\r\n\r\n    public setSource(sourceStream: MediaStream) {\r\n        if (this.source) {\r\n            this.source.disconnect(this.gain);\r\n        }\r\n\r\n        this.source = this.audioCtx.createMediaStreamSource(sourceStream);\r\n        this.source.connect(this.gain);\r\n    }\r\n\r\n    public setVolume(volume: number) {\r\n        this.gain.gain.setValueAtTime(volume, this.audioCtx.currentTime);\r\n    }\r\n\r\n    public setDelay(delay: number) {\r\n        this.delay.delayTime.setValueAtTime(delay, this.audioCtx.currentTime);\r\n    }\r\n\r\n    public start() {\r\n        this.gain.connect(this.delay);\r\n        this.delay.connect(this.audioCtx.destination);\r\n    }\r\n\r\n    public stop() {\r\n        // fade out, to avoid a \"pop\" from the sudden cutoff\r\n        const gain = this.gain;\r\n        gain.gain.setValueAtTime(gain.gain.value, this.audioCtx.currentTime); \r\n        gain.gain.exponentialRampToValueAtTime(0.0001, this.audioCtx.currentTime + 0.05);\r\n\r\n        const delay = this.delay;\r\n        const audioCtx = this.audioCtx;\r\n        \r\n        setTimeout(() => {\r\n            gain.disconnect(delay);\r\n            delay.disconnect(audioCtx.destination);\r\n        }, 25);\r\n    }\r\n}","import * as React from 'react';\r\nimport './LoopDisplay.css';\r\n\r\ninterface IProps {\r\n    beatLengthMs: number;\r\n    numBeats: number;\r\n    setNumBeats: (num: number) => void;\r\n    setBeatLength: (length: number) => void;\r\n    \r\n    playing: boolean;\r\n    start: () => void;\r\n    stop: () => void;\r\n    loop: () => void;\r\n}\r\n\r\ninterface IState {\r\n    beatsRemaining: number;\r\n    loopNumber: number;\r\n}\r\n\r\nexport class LoopDisplay extends React.PureComponent<IProps, IState> {\r\n    private interval: NodeJS.Timer | undefined;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            beatsRemaining: props.numBeats,\r\n            loopNumber: 1,\r\n        };\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        this.stop();\r\n    }\r\n    \r\n    public render() {\r\n        const classes = this.props.playing\r\n            ? 'loop loop--playing'\r\n            : 'loop loop--stopped';\r\n\r\n        const startStopAction = this.props.playing\r\n            ? () => this.stop()\r\n            : () => this.start()\r\n\r\n        const startStop = this.props.playing\r\n            ? <button className=\"loop__button loop__stop\" onClick={startStopAction}>stop</button>\r\n            : <button className=\"loop__button loop__stop\" onClick={startStopAction}>start</button>\r\n\r\n        const numBeatsChanged = (e: React.ChangeEvent<HTMLInputElement>) => this.props.setNumBeats(parseInt(e.target.value, 10));\r\n        const beatLengthChanged = (e: React.ChangeEvent<HTMLInputElement>) => this.props.setBeatLength(parseInt(e.target.value, 10));\r\n\r\n        return (\r\n            <div className={classes}>\r\n                {startStop}\r\n\r\n                <label>\r\n                    Number of beats: \r\n                    <input\r\n                        type=\"number\"\r\n                        value={this.props.numBeats}\r\n                        onChange={numBeatsChanged}\r\n                        disabled={this.props.playing}\r\n                        min={1}\r\n                        max={200}\r\n                        step={1}\r\n                    />\r\n                </label>\r\n                \r\n                <label>\r\n                    Length of each beat (milliseconds): \r\n                    <input\r\n                        type=\"number\"\r\n                        value={this.props.beatLengthMs}\r\n                        onChange={beatLengthChanged}\r\n                        disabled={this.props.playing}\r\n                        min={1}\r\n                        max={10000}\r\n                        step={1}\r\n                    />\r\n                </label>\r\n\r\n                <div className=\"loop__beatsRemaining\">{this.state.beatsRemaining} beats remaining</div>\r\n                <div className=\"loop__loopNumber\">Loop #{this.state.loopNumber}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private start() {\r\n        if (this.props.playing) {\r\n            return;\r\n        }\r\n\r\n        this.interval = setInterval(() => this.beat(), this.props.beatLengthMs)\r\n\r\n        this.setState({\r\n            beatsRemaining: this.props.numBeats,\r\n            loopNumber: 1,\r\n        });\r\n\r\n        this.props.start();\r\n    }\r\n\r\n    private stop() {\r\n        if (!this.props.playing) {\r\n            return;\r\n        }\r\n\r\n        if (this.interval !== undefined) {\r\n            clearInterval(this.interval);\r\n            this.interval = undefined;\r\n        }\r\n\r\n        this.props.stop();\r\n    }\r\n\r\n    private beat() {\r\n        if (this.state.beatsRemaining <= 1) {\r\n            this.setState(state => { return {\r\n                beatsRemaining: this.props.numBeats,\r\n                loopNumber: state.loopNumber + 1,\r\n            }});\r\n\r\n            this.props.loop();\r\n        }\r\n        else {\r\n            this.setState(state => { return {\r\n                beatsRemaining: state.beatsRemaining - 1,\r\n            }});\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport './App.css';\r\nimport { AudioLoop } from './AudioLoop';\r\nimport { LoopDisplay } from './LoopDisplay';\r\n\r\ninterface IState {\r\n    error: boolean;\r\n    looping: boolean;\r\n    numBeats: number;\r\n    beatLengthMs: number;\r\n}\r\n\r\nclass App extends React.Component<{}, IState> {\r\n    private audioLoop: AudioLoop;\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            beatLengthMs: 1000,\r\n            error: false,\r\n            looping: false,\r\n            numBeats: 8,\r\n        };\r\n\r\n        this.audioLoop = new AudioLoop(this.getLoopLength(this.state));\r\n    }\r\n\r\n    public componentDidMount() {\r\n        navigator.mediaDevices.getUserMedia({ audio: true, video: false })\r\n            .then(stream => {\r\n                this.audioLoop.setSource(stream);\r\n            })\r\n            .catch(err => {\r\n                this.setState({\r\n                    error: true,\r\n                    looping: false,\r\n                });\r\n                // alert(err);\r\n            });\r\n    }\r\n\r\n    public componentWillUpdate(nextProps: {}, nextState: IState) {\r\n        if (nextState.beatLengthMs !== this.state.beatLengthMs || nextState.numBeats !== this.state.numBeats) {\r\n            this.audioLoop.setDelay(this.getLoopLength(nextState));\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        if (this.state.error) {\r\n            return (\r\n                <div className=\"App\">\r\n                    <header className=\"App-header\">\r\n                        <h1 className=\"App-title\">Loopy sound recorder</h1>\r\n                        <p className=\"App-error\">Couldn't locate microphone, unable to continue.</p>\r\n                    </header>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        const startLoop = () => this.startLoop();\r\n        const stopLoop = () => this.stopLoop();\r\n        const nextLoop = () => this.nextLoop();\r\n        const setNumBeats = (num: number) => this.setNumBeats(num);\r\n        const setBeatLength = (length: number) => this.setBeatLength(length);\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <h1 className=\"App-title\">Loopy sound recorder</h1>\r\n                    <p className=\"App-intro\">You probably <em>don't</em> want to use headphones.</p>\r\n                </header>\r\n\r\n                <LoopDisplay\r\n                    numBeats={this.state.numBeats}\r\n                    beatLengthMs={this.state.beatLengthMs}\r\n                    setNumBeats={setNumBeats}\r\n                    setBeatLength={setBeatLength}\r\n\r\n                    playing={this.state.looping}\r\n                    start={startLoop}\r\n                    stop={stopLoop}\r\n                    loop={nextLoop}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getLoopLength(state: IState) { return state.numBeats * state.beatLengthMs / 1000; }\r\n\r\n    private setNumBeats(num: number) {\r\n        if (this.state.looping) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            numBeats: num,\r\n        });\r\n    }\r\n\r\n    private setBeatLength(length: number) {\r\n        if (this.state.looping) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            beatLengthMs: length,\r\n        });\r\n    }\r\n\r\n    private startLoop() {\r\n        this.audioLoop.start();\r\n\r\n        this.setState({\r\n            looping: true,\r\n        })\r\n    }\r\n\r\n    private stopLoop() {\r\n        this.audioLoop.stop();\r\n\r\n        this.setState({\r\n            looping: false,\r\n        })\r\n    }\r\n\r\n    private nextLoop() {\r\n        // TODO: do something\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport { register } from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root') as HTMLElement\r\n);\r\n\r\nregister();\r\n"],"sourceRoot":""}